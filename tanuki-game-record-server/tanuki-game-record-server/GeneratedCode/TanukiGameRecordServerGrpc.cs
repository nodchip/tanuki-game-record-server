// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TanukiGameRecordServer.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace TanukiGameRecordServer {
  /// <summary>
  /// サーバーにより提供される棋譜サービス
  /// </summary>
  public static partial class GameRecordService
  {
    static readonly string __ServiceName = "TanukiGameRecordServer.GameRecordService";

    static readonly Marshaller<global::TanukiGameRecordServer.UpsertGameRecordRequest> __Marshaller_UpsertGameRecordRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TanukiGameRecordServer.UpsertGameRecordRequest.Parser.ParseFrom);
    static readonly Marshaller<global::TanukiGameRecordServer.UpsertGameRecordResponse> __Marshaller_UpsertGameRecordResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TanukiGameRecordServer.UpsertGameRecordResponse.Parser.ParseFrom);
    static readonly Marshaller<global::TanukiGameRecordServer.SearchGameRecordRequest> __Marshaller_SearchGameRecordRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TanukiGameRecordServer.SearchGameRecordRequest.Parser.ParseFrom);
    static readonly Marshaller<global::TanukiGameRecordServer.SearchGameRecordResponse> __Marshaller_SearchGameRecordResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TanukiGameRecordServer.SearchGameRecordResponse.Parser.ParseFrom);
    static readonly Marshaller<global::TanukiGameRecordServer.GetGameRecordRequest> __Marshaller_GetGameRecordRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TanukiGameRecordServer.GetGameRecordRequest.Parser.ParseFrom);
    static readonly Marshaller<global::TanukiGameRecordServer.GetGameRecordResponse> __Marshaller_GetGameRecordResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TanukiGameRecordServer.GetGameRecordResponse.Parser.ParseFrom);

    static readonly Method<global::TanukiGameRecordServer.UpsertGameRecordRequest, global::TanukiGameRecordServer.UpsertGameRecordResponse> __Method_UpsertGameRecord = new Method<global::TanukiGameRecordServer.UpsertGameRecordRequest, global::TanukiGameRecordServer.UpsertGameRecordResponse>(
        MethodType.Unary,
        __ServiceName,
        "UpsertGameRecord",
        __Marshaller_UpsertGameRecordRequest,
        __Marshaller_UpsertGameRecordResponse);

    static readonly Method<global::TanukiGameRecordServer.SearchGameRecordRequest, global::TanukiGameRecordServer.SearchGameRecordResponse> __Method_ListGameRecord = new Method<global::TanukiGameRecordServer.SearchGameRecordRequest, global::TanukiGameRecordServer.SearchGameRecordResponse>(
        MethodType.ServerStreaming,
        __ServiceName,
        "ListGameRecord",
        __Marshaller_SearchGameRecordRequest,
        __Marshaller_SearchGameRecordResponse);

    static readonly Method<global::TanukiGameRecordServer.GetGameRecordRequest, global::TanukiGameRecordServer.GetGameRecordResponse> __Method_GetGameRecord = new Method<global::TanukiGameRecordServer.GetGameRecordRequest, global::TanukiGameRecordServer.GetGameRecordResponse>(
        MethodType.ServerStreaming,
        __ServiceName,
        "GetGameRecord",
        __Marshaller_GetGameRecordRequest,
        __Marshaller_GetGameRecordResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::TanukiGameRecordServer.TanukiGameRecordServerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of GameRecordService</summary>
    public abstract partial class GameRecordServiceBase
    {
      /// <summary>
      /// 棋譜の新規登録・更新を行う
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::TanukiGameRecordServer.UpsertGameRecordResponse> UpsertGameRecord(global::TanukiGameRecordServer.UpsertGameRecordRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 棋譜の一覧を取得する
      /// 検索条件を設定して複数の棋譜を返すことができる
      /// GetGameRecordと違い、サーバー側で終了メソッドが呼ばれる点に注意する
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task ListGameRecord(global::TanukiGameRecordServer.SearchGameRecordRequest request, IServerStreamWriter<global::TanukiGameRecordServer.SearchGameRecordResponse> responseStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 棋譜を取得する
      /// 棋譜が更新される度に更新された棋譜が返る
      /// ListGameRecordと違い、サーバー側で送信の終了メソッドが呼ばれない点に注意する
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task GetGameRecord(global::TanukiGameRecordServer.GetGameRecordRequest request, IServerStreamWriter<global::TanukiGameRecordServer.GetGameRecordResponse> responseStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for GameRecordService</summary>
    public partial class GameRecordServiceClient : ClientBase<GameRecordServiceClient>
    {
      /// <summary>Creates a new client for GameRecordService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GameRecordServiceClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for GameRecordService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GameRecordServiceClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GameRecordServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GameRecordServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// 棋譜の新規登録・更新を行う
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TanukiGameRecordServer.UpsertGameRecordResponse UpsertGameRecord(global::TanukiGameRecordServer.UpsertGameRecordRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpsertGameRecord(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 棋譜の新規登録・更新を行う
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::TanukiGameRecordServer.UpsertGameRecordResponse UpsertGameRecord(global::TanukiGameRecordServer.UpsertGameRecordRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpsertGameRecord, null, options, request);
      }
      /// <summary>
      /// 棋譜の新規登録・更新を行う
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual AsyncUnaryCall<global::TanukiGameRecordServer.UpsertGameRecordResponse> UpsertGameRecordAsync(global::TanukiGameRecordServer.UpsertGameRecordRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpsertGameRecordAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 棋譜の新規登録・更新を行う
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual AsyncUnaryCall<global::TanukiGameRecordServer.UpsertGameRecordResponse> UpsertGameRecordAsync(global::TanukiGameRecordServer.UpsertGameRecordRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpsertGameRecord, null, options, request);
      }
      /// <summary>
      /// 棋譜の一覧を取得する
      /// 検索条件を設定して複数の棋譜を返すことができる
      /// GetGameRecordと違い、サーバー側で終了メソッドが呼ばれる点に注意する
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual AsyncServerStreamingCall<global::TanukiGameRecordServer.SearchGameRecordResponse> ListGameRecord(global::TanukiGameRecordServer.SearchGameRecordRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListGameRecord(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 棋譜の一覧を取得する
      /// 検索条件を設定して複数の棋譜を返すことができる
      /// GetGameRecordと違い、サーバー側で終了メソッドが呼ばれる点に注意する
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual AsyncServerStreamingCall<global::TanukiGameRecordServer.SearchGameRecordResponse> ListGameRecord(global::TanukiGameRecordServer.SearchGameRecordRequest request, CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ListGameRecord, null, options, request);
      }
      /// <summary>
      /// 棋譜を取得する
      /// 棋譜が更新される度に更新された棋譜が返る
      /// ListGameRecordと違い、サーバー側で送信の終了メソッドが呼ばれない点に注意する
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual AsyncServerStreamingCall<global::TanukiGameRecordServer.GetGameRecordResponse> GetGameRecord(global::TanukiGameRecordServer.GetGameRecordRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetGameRecord(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 棋譜を取得する
      /// 棋譜が更新される度に更新された棋譜が返る
      /// ListGameRecordと違い、サーバー側で送信の終了メソッドが呼ばれない点に注意する
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual AsyncServerStreamingCall<global::TanukiGameRecordServer.GetGameRecordResponse> GetGameRecord(global::TanukiGameRecordServer.GetGameRecordRequest request, CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetGameRecord, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GameRecordServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GameRecordServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static ServerServiceDefinition BindService(GameRecordServiceBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_UpsertGameRecord, serviceImpl.UpsertGameRecord)
          .AddMethod(__Method_ListGameRecord, serviceImpl.ListGameRecord)
          .AddMethod(__Method_GetGameRecord, serviceImpl.GetGameRecord).Build();
    }

  }
}
#endregion
