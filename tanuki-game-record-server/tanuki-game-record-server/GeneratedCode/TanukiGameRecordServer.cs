// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TanukiGameRecordServer.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TanukiGameRecordServer {

  /// <summary>Holder for reflection information generated from TanukiGameRecordServer.proto</summary>
  public static partial class TanukiGameRecordServerReflection {

    #region Descriptor
    /// <summary>File descriptor for TanukiGameRecordServer.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TanukiGameRecordServerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxUYW51a2lHYW1lUmVjb3JkU2VydmVyLnByb3RvEhZUYW51a2lHYW1lUmVj",
            "b3JkU2VydmVyIlIKF1Vwc2VydEdhbWVSZWNvcmRSZXF1ZXN0EjcKC2dhbWVf",
            "cmVjb3JkGAEgASgLMiIuVGFudWtpR2FtZVJlY29yZFNlcnZlci5HYW1lUmVj",
            "b3JkIlMKGFVwc2VydEdhbWVSZWNvcmRSZXNwb25zZRI3CgtnYW1lX3JlY29y",
            "ZBgBIAEoCzIiLlRhbnVraUdhbWVSZWNvcmRTZXJ2ZXIuR2FtZVJlY29yZCJU",
            "ChdTZWFyY2hHYW1lUmVjb3JkUmVxdWVzdBI5CgxzZWFyY2hfcXVlcnkYASAB",
            "KAsyIy5UYW51a2lHYW1lUmVjb3JkU2VydmVyLlNlYXJjaFF1ZXJ5IlMKGFNl",
            "YXJjaEdhbWVSZWNvcmRSZXNwb25zZRI3CgtnYW1lX3JlY29yZBgBIAEoCzIi",
            "LlRhbnVraUdhbWVSZWNvcmRTZXJ2ZXIuR2FtZVJlY29yZCJUChRHZXRHYW1l",
            "UmVjb3JkUmVxdWVzdBI8Cg5nYW1lX3JlY29yZF9pZBgBIAEoCzIkLlRhbnVr",
            "aUdhbWVSZWNvcmRTZXJ2ZXIuR2FtZVJlY29yZElkIlAKFUdldEdhbWVSZWNv",
            "cmRSZXNwb25zZRI3CgtnYW1lX3JlY29yZBgBIAEoCzIiLlRhbnVraUdhbWVS",
            "ZWNvcmRTZXJ2ZXIuR2FtZVJlY29yZCJICgtTZWFyY2hRdWVyeRI5CgxzZWFy",
            "Y2hfdGVybXMYASABKAsyIy5UYW51a2lHYW1lUmVjb3JkU2VydmVyLlNlYXJj",
            "aFRlcm1zIkYKC1NlYXJjaFRlcm1zEjcKC3NlYXJjaF90ZXJtGAEgASgLMiIu",
            "VGFudWtpR2FtZVJlY29yZFNlcnZlci5TZWFyY2hUZXJtIqwHCgpTZWFyY2hU",
            "ZXJtEjUKBHR5cGUYASABKA4yJy5UYW51a2lHYW1lUmVjb3JkU2VydmVyLlNl",
            "YXJjaFRlcm0uVHlwZRIUCgxzdHJpbmdfdmFsdWUYAiABKAkSEwoLaW50MzJf",
            "dmFsdWUYAyABKAUSEwoLaW50NjRfdmFsdWUYBCABKAMSDgoGbmVnYXRlGAUg",
            "ASgIIpYGCgRUeXBlEhkKFVVua25vd25TZWFyY2hUZXJtVHlwZRAAEhgKFEJs",
            "YWNrUGVyZmVjdE1hdGNoaW5nEAESGAoUQmxhY2tGb3J3YXJkTWF0Y2hpbmcQ",
            "AhISCg5CbGFja0luY2x1ZGluZxADEhkKFUJsYWNrQmFja3dhcmRNYXRjaGlu",
            "ZxAEEhgKFFdoaXRlUGVyZmVjdE1hdGNoaW5nEAUSGAoUV2hpdGVGb3J3YXJk",
            "TWF0Y2hpbmcQBhISCg5XaGl0ZUluY2x1ZGluZxAHEhkKFVdoaXRlQmFja3dh",
            "cmRNYXRjaGluZxAIEhgKFEV2ZW50UGVyZmVjdE1hdGNoaW5nEAkSGAoURXZl",
            "bnRGb3J3YXJkTWF0Y2hpbmcQChISCg5FdmVudEluY2x1ZGluZxALEhkKFUV2",
            "ZW50QmFja3dhcmRNYXRjaGluZxAMEhcKE1NpdGVQZXJmZWN0TWF0Y2hpbmcQ",
            "DRIXChNTaXRlRm9yd2FyZE1hdGNoaW5nEA4SEQoNU2l0ZUluY2x1ZGluZxAP",
            "EhgKFFNpdGVCYWNrd2FyZE1hdGNoaW5nEBASGAoUU3RhcnRUaW1lMTAwTmFu",
            "b0Zyb20QERIWChJTdGFydFRpbWUxMDBOYW5vVG8QEhIWChJFbmRUaW1lMTAw",
            "TmFub0Zyb20QExIUChBFbmRUaW1lMTAwTmFub1RvEBQSFAoQVGltZUxpbWl0",
            "TWluRnJvbRAVEhIKDlRpbWVMaW1pdE1pblRvEBYSGwoXVGltZUxpbWl0Qnlv",
            "eW9taVNlY0Zyb20QFxIZChVUaW1lTGltaXRCeW95b21pU2VjVG8QGBIfChtU",
            "aW1lTGltaXRJbmNyZW1lbnRhbFNlY0Zyb20QGRIdChlUaW1lTGltaXRJbmNy",
            "ZW1lbnRhbFNlY1RvEBoSGgoWT3BlbmluZ1BlcmZlY3RNYXRjaGluZxAbEhoK",
            "Fk9wZW5pbmdGb3J3YXJkTWF0Y2hpbmcQHBIUChBPcGVuaW5nSW5jbHVkaW5n",
            "EB0SGwoXT3BlbmluZ0JhY2t3YXJkTWF0Y2hpbmcQHiIaCgxHYW1lUmVjb3Jk",
            "SWQSCgoCaWQYASABKAMi/gIKCkdhbWVSZWNvcmQSMAoCaWQYASABKAsyJC5U",
            "YW51a2lHYW1lUmVjb3JkU2VydmVyLkdhbWVSZWNvcmRJZBINCgVibGFjaxgC",
            "IAEoCRINCgV3aGl0ZRgDIAEoCRINCgVldmVudBgEIAEoCRIMCgRzaXRlGAUg",
            "ASgJEhoKEnN0YXJ0X3RpbWVfMTAwbmFubxgGIAEoAxIYChBlbmRfdGltZV8x",
            "MDBuYW5vGAcgASgDEhYKDnRpbWVfbGltaXRfbWluGAggASgFEh4KFnRpbWVf",
            "bGltaXRfYnlveW9taV9zZWMYCSABKAUSIgoadGltZV9saW1pdF9pbmNyZW1l",
            "bnRhbF9zZWMYCiABKAUSDwoHb3BlbmluZxgLIAEoCRI0Cg1pbml0aWFsX2Jv",
            "YXJkGAwgAygLMh0uVGFudWtpR2FtZVJlY29yZFNlcnZlci5QaWVjZRIqCgRt",
            "b3ZlGA0gAygLMhwuVGFudWtpR2FtZVJlY29yZFNlcnZlci5Nb3ZlIsUBCgRN",
            "b3ZlEiwKBGZyb20YASABKAsyHi5UYW51a2lHYW1lUmVjb3JkU2VydmVyLlNx",
            "dWFyZRIqCgJ0bxgCIAEoCzIeLlRhbnVraUdhbWVSZWNvcmRTZXJ2ZXIuU3F1",
            "YXJlEjUKCnBpZWNlX3R5cGUYAyABKA4yIS5UYW51a2lHYW1lUmVjb3JkU2Vy",
            "dmVyLlBpZWNlVHlwZRIsCgVjb2xvchgEIAEoDjIdLlRhbnVraUdhbWVSZWNv",
            "cmRTZXJ2ZXIuQ29sb3IikwEKBlNxdWFyZRIxCgR0eXBlGAEgASgOMiMuVGFu",
            "dWtpR2FtZVJlY29yZFNlcnZlci5TcXVhcmUuVHlwZRIMCgRmaWxlGAIgASgF",
            "EgwKBHJhbmsYAyABKAUiOgoEVHlwZRIVChFVbmtub3duU3F1YXJlVHlwZRAA",
            "EgsKB09uQm9hcmQQARIOCgpQaWVjZVN0YW5kEAIinAEKBVBpZWNlEi4KBnNx",
            "dWFyZRgBIAEoCzIeLlRhbnVraUdhbWVSZWNvcmRTZXJ2ZXIuU3F1YXJlEjUK",
            "CnBpZWNlX3R5cGUYAiABKA4yIS5UYW51a2lHYW1lUmVjb3JkU2VydmVyLlBp",
            "ZWNlVHlwZRIsCgVjb2xvchgDIAEoDjIdLlRhbnVraUdhbWVSZWNvcmRTZXJ2",
            "ZXIuQ29sb3Iq6wEKCVBpZWNlVHlwZRIUChBVbmtub3duUGllY2VUeXBlEAAS",
            "CAoEUGF3bhABEgkKBUxhbmNlEAISCgoGS25pZ2h0EAMSCgoGU2lsdmVyEAQS",
            "CgoGQmlzaG9wEAUSCAoEUm9vaxAGEggKBEdvbGQQBxIICgRLaW5nEAgSEAoM",
            "UHJvbW90ZWRQYXduEAkSEQoNUHJvbW90ZWRMYW5jZRAKEhIKDlByb21vdGVk",
            "S25pZ2h0EAsSEgoOUHJvbW90ZWRTaWx2ZXIQDBISCg5Qcm9tb3RlZEJpc2hv",
            "cBANEhAKDFByb21vdGVkUm9vaxAOKjAKBUNvbG9yEhAKDFVua25vd25Db2xv",
            "chAAEgkKBUJsYWNrEAESCgoGV2hpbHRlEAIy9wIKEUdhbWVSZWNvcmRTZXJ2",
            "aWNlEncKEFVwc2VydEdhbWVSZWNvcmQSLy5UYW51a2lHYW1lUmVjb3JkU2Vy",
            "dmVyLlVwc2VydEdhbWVSZWNvcmRSZXF1ZXN0GjAuVGFudWtpR2FtZVJlY29y",
            "ZFNlcnZlci5VcHNlcnRHYW1lUmVjb3JkUmVzcG9uc2UiABJ3Cg5MaXN0R2Ft",
            "ZVJlY29yZBIvLlRhbnVraUdhbWVSZWNvcmRTZXJ2ZXIuU2VhcmNoR2FtZVJl",
            "Y29yZFJlcXVlc3QaMC5UYW51a2lHYW1lUmVjb3JkU2VydmVyLlNlYXJjaEdh",
            "bWVSZWNvcmRSZXNwb25zZSIAMAEScAoNR2V0R2FtZVJlY29yZBIsLlRhbnVr",
            "aUdhbWVSZWNvcmRTZXJ2ZXIuR2V0R2FtZVJlY29yZFJlcXVlc3QaLS5UYW51",
            "a2lHYW1lUmVjb3JkU2VydmVyLkdldEdhbWVSZWNvcmRSZXNwb25zZSIAMAFi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::TanukiGameRecordServer.PieceType), typeof(global::TanukiGameRecordServer.Color), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TanukiGameRecordServer.UpsertGameRecordRequest), global::TanukiGameRecordServer.UpsertGameRecordRequest.Parser, new[]{ "GameRecord" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TanukiGameRecordServer.UpsertGameRecordResponse), global::TanukiGameRecordServer.UpsertGameRecordResponse.Parser, new[]{ "GameRecord" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TanukiGameRecordServer.SearchGameRecordRequest), global::TanukiGameRecordServer.SearchGameRecordRequest.Parser, new[]{ "SearchQuery" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TanukiGameRecordServer.SearchGameRecordResponse), global::TanukiGameRecordServer.SearchGameRecordResponse.Parser, new[]{ "GameRecord" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TanukiGameRecordServer.GetGameRecordRequest), global::TanukiGameRecordServer.GetGameRecordRequest.Parser, new[]{ "GameRecordId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TanukiGameRecordServer.GetGameRecordResponse), global::TanukiGameRecordServer.GetGameRecordResponse.Parser, new[]{ "GameRecord" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TanukiGameRecordServer.SearchQuery), global::TanukiGameRecordServer.SearchQuery.Parser, new[]{ "SearchTerms" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TanukiGameRecordServer.SearchTerms), global::TanukiGameRecordServer.SearchTerms.Parser, new[]{ "SearchTerm" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TanukiGameRecordServer.SearchTerm), global::TanukiGameRecordServer.SearchTerm.Parser, new[]{ "Type", "StringValue", "Int32Value", "Int64Value", "Negate" }, null, new[]{ typeof(global::TanukiGameRecordServer.SearchTerm.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TanukiGameRecordServer.GameRecordId), global::TanukiGameRecordServer.GameRecordId.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TanukiGameRecordServer.GameRecord), global::TanukiGameRecordServer.GameRecord.Parser, new[]{ "Id", "Black", "White", "Event", "Site", "StartTime100Nano", "EndTime100Nano", "TimeLimitMin", "TimeLimitByoyomiSec", "TimeLimitIncrementalSec", "Opening", "InitialBoard", "Move" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TanukiGameRecordServer.Move), global::TanukiGameRecordServer.Move.Parser, new[]{ "From", "To", "PieceType", "Color" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TanukiGameRecordServer.Square), global::TanukiGameRecordServer.Square.Parser, new[]{ "Type", "File", "Rank" }, null, new[]{ typeof(global::TanukiGameRecordServer.Square.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TanukiGameRecordServer.Piece), global::TanukiGameRecordServer.Piece.Parser, new[]{ "Square", "PieceType", "Color" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum PieceType {
    [pbr::OriginalName("UnknownPieceType")] UnknownPieceType = 0,
    /// <summary>
    ///  歩
    /// </summary>
    [pbr::OriginalName("Pawn")] Pawn = 1,
    /// <summary>
    ///  香
    /// </summary>
    [pbr::OriginalName("Lance")] Lance = 2,
    /// <summary>
    ///  桂
    /// </summary>
    [pbr::OriginalName("Knight")] Knight = 3,
    /// <summary>
    ///  銀
    /// </summary>
    [pbr::OriginalName("Silver")] Silver = 4,
    /// <summary>
    ///  角
    /// </summary>
    [pbr::OriginalName("Bishop")] Bishop = 5,
    /// <summary>
    ///  飛
    /// </summary>
    [pbr::OriginalName("Rook")] Rook = 6,
    /// <summary>
    ///  金
    /// </summary>
    [pbr::OriginalName("Gold")] Gold = 7,
    /// <summary>
    ///  玉
    /// </summary>
    [pbr::OriginalName("King")] King = 8,
    /// <summary>
    ///  と
    /// </summary>
    [pbr::OriginalName("PromotedPawn")] PromotedPawn = 9,
    /// <summary>
    ///  成香
    /// </summary>
    [pbr::OriginalName("PromotedLance")] PromotedLance = 10,
    /// <summary>
    ///  成桂
    /// </summary>
    [pbr::OriginalName("PromotedKnight")] PromotedKnight = 11,
    /// <summary>
    ///  成銀
    /// </summary>
    [pbr::OriginalName("PromotedSilver")] PromotedSilver = 12,
    /// <summary>
    ///  馬
    /// </summary>
    [pbr::OriginalName("PromotedBishop")] PromotedBishop = 13,
    /// <summary>
    ///  龍
    /// </summary>
    [pbr::OriginalName("PromotedRook")] PromotedRook = 14,
  }

  /// <summary>
  ///  対局者の先手・後手
  /// </summary>
  public enum Color {
    [pbr::OriginalName("UnknownColor")] UnknownColor = 0,
    /// <summary>
    ///  先手
    /// </summary>
    [pbr::OriginalName("Black")] Black = 1,
    /// <summary>
    ///  後手
    /// </summary>
    [pbr::OriginalName("Whilte")] Whilte = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  ///  UpsertGameRecordの引数
  /// </summary>
  public sealed partial class UpsertGameRecordRequest : pb::IMessage<UpsertGameRecordRequest> {
    private static readonly pb::MessageParser<UpsertGameRecordRequest> _parser = new pb::MessageParser<UpsertGameRecordRequest>(() => new UpsertGameRecordRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpsertGameRecordRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TanukiGameRecordServer.TanukiGameRecordServerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpsertGameRecordRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpsertGameRecordRequest(UpsertGameRecordRequest other) : this() {
      GameRecord = other.gameRecord_ != null ? other.GameRecord.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpsertGameRecordRequest Clone() {
      return new UpsertGameRecordRequest(this);
    }

    /// <summary>Field number for the "game_record" field.</summary>
    public const int GameRecordFieldNumber = 1;
    private global::TanukiGameRecordServer.GameRecord gameRecord_;
    /// <summary>
    ///  [必須]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TanukiGameRecordServer.GameRecord GameRecord {
      get { return gameRecord_; }
      set {
        gameRecord_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpsertGameRecordRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpsertGameRecordRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GameRecord, other.GameRecord)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gameRecord_ != null) hash ^= GameRecord.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gameRecord_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameRecord);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gameRecord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameRecord);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpsertGameRecordRequest other) {
      if (other == null) {
        return;
      }
      if (other.gameRecord_ != null) {
        if (gameRecord_ == null) {
          gameRecord_ = new global::TanukiGameRecordServer.GameRecord();
        }
        GameRecord.MergeFrom(other.GameRecord);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (gameRecord_ == null) {
              gameRecord_ = new global::TanukiGameRecordServer.GameRecord();
            }
            input.ReadMessage(gameRecord_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  UpsertGameRecordの引数
  /// </summary>
  public sealed partial class UpsertGameRecordResponse : pb::IMessage<UpsertGameRecordResponse> {
    private static readonly pb::MessageParser<UpsertGameRecordResponse> _parser = new pb::MessageParser<UpsertGameRecordResponse>(() => new UpsertGameRecordResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpsertGameRecordResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TanukiGameRecordServer.TanukiGameRecordServerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpsertGameRecordResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpsertGameRecordResponse(UpsertGameRecordResponse other) : this() {
      GameRecord = other.gameRecord_ != null ? other.GameRecord.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpsertGameRecordResponse Clone() {
      return new UpsertGameRecordResponse(this);
    }

    /// <summary>Field number for the "game_record" field.</summary>
    public const int GameRecordFieldNumber = 1;
    private global::TanukiGameRecordServer.GameRecord gameRecord_;
    /// <summary>
    ///  [必須]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TanukiGameRecordServer.GameRecord GameRecord {
      get { return gameRecord_; }
      set {
        gameRecord_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpsertGameRecordResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpsertGameRecordResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GameRecord, other.GameRecord)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gameRecord_ != null) hash ^= GameRecord.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gameRecord_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameRecord);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gameRecord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameRecord);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpsertGameRecordResponse other) {
      if (other == null) {
        return;
      }
      if (other.gameRecord_ != null) {
        if (gameRecord_ == null) {
          gameRecord_ = new global::TanukiGameRecordServer.GameRecord();
        }
        GameRecord.MergeFrom(other.GameRecord);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (gameRecord_ == null) {
              gameRecord_ = new global::TanukiGameRecordServer.GameRecord();
            }
            input.ReadMessage(gameRecord_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  SearchGameRecordの引数
  /// </summary>
  public sealed partial class SearchGameRecordRequest : pb::IMessage<SearchGameRecordRequest> {
    private static readonly pb::MessageParser<SearchGameRecordRequest> _parser = new pb::MessageParser<SearchGameRecordRequest>(() => new SearchGameRecordRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchGameRecordRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TanukiGameRecordServer.TanukiGameRecordServerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchGameRecordRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchGameRecordRequest(SearchGameRecordRequest other) : this() {
      SearchQuery = other.searchQuery_ != null ? other.SearchQuery.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchGameRecordRequest Clone() {
      return new SearchGameRecordRequest(this);
    }

    /// <summary>Field number for the "search_query" field.</summary>
    public const int SearchQueryFieldNumber = 1;
    private global::TanukiGameRecordServer.SearchQuery searchQuery_;
    /// <summary>
    ///  [必須]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TanukiGameRecordServer.SearchQuery SearchQuery {
      get { return searchQuery_; }
      set {
        searchQuery_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchGameRecordRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchGameRecordRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SearchQuery, other.SearchQuery)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (searchQuery_ != null) hash ^= SearchQuery.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (searchQuery_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SearchQuery);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (searchQuery_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SearchQuery);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchGameRecordRequest other) {
      if (other == null) {
        return;
      }
      if (other.searchQuery_ != null) {
        if (searchQuery_ == null) {
          searchQuery_ = new global::TanukiGameRecordServer.SearchQuery();
        }
        SearchQuery.MergeFrom(other.SearchQuery);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (searchQuery_ == null) {
              searchQuery_ = new global::TanukiGameRecordServer.SearchQuery();
            }
            input.ReadMessage(searchQuery_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  SearchGameRecordの引数
  /// </summary>
  public sealed partial class SearchGameRecordResponse : pb::IMessage<SearchGameRecordResponse> {
    private static readonly pb::MessageParser<SearchGameRecordResponse> _parser = new pb::MessageParser<SearchGameRecordResponse>(() => new SearchGameRecordResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchGameRecordResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TanukiGameRecordServer.TanukiGameRecordServerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchGameRecordResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchGameRecordResponse(SearchGameRecordResponse other) : this() {
      GameRecord = other.gameRecord_ != null ? other.GameRecord.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchGameRecordResponse Clone() {
      return new SearchGameRecordResponse(this);
    }

    /// <summary>Field number for the "game_record" field.</summary>
    public const int GameRecordFieldNumber = 1;
    private global::TanukiGameRecordServer.GameRecord gameRecord_;
    /// <summary>
    ///  [必須]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TanukiGameRecordServer.GameRecord GameRecord {
      get { return gameRecord_; }
      set {
        gameRecord_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchGameRecordResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchGameRecordResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GameRecord, other.GameRecord)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gameRecord_ != null) hash ^= GameRecord.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gameRecord_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameRecord);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gameRecord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameRecord);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchGameRecordResponse other) {
      if (other == null) {
        return;
      }
      if (other.gameRecord_ != null) {
        if (gameRecord_ == null) {
          gameRecord_ = new global::TanukiGameRecordServer.GameRecord();
        }
        GameRecord.MergeFrom(other.GameRecord);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (gameRecord_ == null) {
              gameRecord_ = new global::TanukiGameRecordServer.GameRecord();
            }
            input.ReadMessage(gameRecord_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  GetGameRecordの引数
  /// </summary>
  public sealed partial class GetGameRecordRequest : pb::IMessage<GetGameRecordRequest> {
    private static readonly pb::MessageParser<GetGameRecordRequest> _parser = new pb::MessageParser<GetGameRecordRequest>(() => new GetGameRecordRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetGameRecordRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TanukiGameRecordServer.TanukiGameRecordServerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGameRecordRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGameRecordRequest(GetGameRecordRequest other) : this() {
      GameRecordId = other.gameRecordId_ != null ? other.GameRecordId.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGameRecordRequest Clone() {
      return new GetGameRecordRequest(this);
    }

    /// <summary>Field number for the "game_record_id" field.</summary>
    public const int GameRecordIdFieldNumber = 1;
    private global::TanukiGameRecordServer.GameRecordId gameRecordId_;
    /// <summary>
    ///  [必須]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TanukiGameRecordServer.GameRecordId GameRecordId {
      get { return gameRecordId_; }
      set {
        gameRecordId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetGameRecordRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetGameRecordRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GameRecordId, other.GameRecordId)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gameRecordId_ != null) hash ^= GameRecordId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gameRecordId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameRecordId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gameRecordId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameRecordId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetGameRecordRequest other) {
      if (other == null) {
        return;
      }
      if (other.gameRecordId_ != null) {
        if (gameRecordId_ == null) {
          gameRecordId_ = new global::TanukiGameRecordServer.GameRecordId();
        }
        GameRecordId.MergeFrom(other.GameRecordId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (gameRecordId_ == null) {
              gameRecordId_ = new global::TanukiGameRecordServer.GameRecordId();
            }
            input.ReadMessage(gameRecordId_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  GetGameRecordの引数
  /// </summary>
  public sealed partial class GetGameRecordResponse : pb::IMessage<GetGameRecordResponse> {
    private static readonly pb::MessageParser<GetGameRecordResponse> _parser = new pb::MessageParser<GetGameRecordResponse>(() => new GetGameRecordResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetGameRecordResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TanukiGameRecordServer.TanukiGameRecordServerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGameRecordResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGameRecordResponse(GetGameRecordResponse other) : this() {
      GameRecord = other.gameRecord_ != null ? other.GameRecord.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGameRecordResponse Clone() {
      return new GetGameRecordResponse(this);
    }

    /// <summary>Field number for the "game_record" field.</summary>
    public const int GameRecordFieldNumber = 1;
    private global::TanukiGameRecordServer.GameRecord gameRecord_;
    /// <summary>
    ///  [必須]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TanukiGameRecordServer.GameRecord GameRecord {
      get { return gameRecord_; }
      set {
        gameRecord_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetGameRecordResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetGameRecordResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GameRecord, other.GameRecord)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gameRecord_ != null) hash ^= GameRecord.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gameRecord_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameRecord);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gameRecord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameRecord);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetGameRecordResponse other) {
      if (other == null) {
        return;
      }
      if (other.gameRecord_ != null) {
        if (gameRecord_ == null) {
          gameRecord_ = new global::TanukiGameRecordServer.GameRecord();
        }
        GameRecord.MergeFrom(other.GameRecord);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (gameRecord_ == null) {
              gameRecord_ = new global::TanukiGameRecordServer.GameRecord();
            }
            input.ReadMessage(gameRecord_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  棋譜検索クエリ
  /// </summary>
  public sealed partial class SearchQuery : pb::IMessage<SearchQuery> {
    private static readonly pb::MessageParser<SearchQuery> _parser = new pb::MessageParser<SearchQuery>(() => new SearchQuery());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchQuery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TanukiGameRecordServer.TanukiGameRecordServerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchQuery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchQuery(SearchQuery other) : this() {
      SearchTerms = other.searchTerms_ != null ? other.SearchTerms.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchQuery Clone() {
      return new SearchQuery(this);
    }

    /// <summary>Field number for the "search_terms" field.</summary>
    public const int SearchTermsFieldNumber = 1;
    private global::TanukiGameRecordServer.SearchTerms searchTerms_;
    /// <summary>
    ///  検索クエリの条件項の積集合の和集合
    ///
    ///  各SearchTermsの条件にマッチする棋譜の和集合にマッチする
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TanukiGameRecordServer.SearchTerms SearchTerms {
      get { return searchTerms_; }
      set {
        searchTerms_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchQuery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchQuery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SearchTerms, other.SearchTerms)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (searchTerms_ != null) hash ^= SearchTerms.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (searchTerms_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SearchTerms);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (searchTerms_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SearchTerms);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchQuery other) {
      if (other == null) {
        return;
      }
      if (other.searchTerms_ != null) {
        if (searchTerms_ == null) {
          searchTerms_ = new global::TanukiGameRecordServer.SearchTerms();
        }
        SearchTerms.MergeFrom(other.SearchTerms);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (searchTerms_ == null) {
              searchTerms_ = new global::TanukiGameRecordServer.SearchTerms();
            }
            input.ReadMessage(searchTerms_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  検索クエリの条件項の積集合
  /// </summary>
  public sealed partial class SearchTerms : pb::IMessage<SearchTerms> {
    private static readonly pb::MessageParser<SearchTerms> _parser = new pb::MessageParser<SearchTerms>(() => new SearchTerms());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchTerms> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TanukiGameRecordServer.TanukiGameRecordServerReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchTerms() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchTerms(SearchTerms other) : this() {
      SearchTerm = other.searchTerm_ != null ? other.SearchTerm.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchTerms Clone() {
      return new SearchTerms(this);
    }

    /// <summary>Field number for the "search_term" field.</summary>
    public const int SearchTermFieldNumber = 1;
    private global::TanukiGameRecordServer.SearchTerm searchTerm_;
    /// <summary>
    ///  検索クエリの積集合
    ///
    ///  SearchTerm全ての条件に該当する棋譜にマッチする
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TanukiGameRecordServer.SearchTerm SearchTerm {
      get { return searchTerm_; }
      set {
        searchTerm_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchTerms);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchTerms other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SearchTerm, other.SearchTerm)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (searchTerm_ != null) hash ^= SearchTerm.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (searchTerm_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SearchTerm);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (searchTerm_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SearchTerm);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchTerms other) {
      if (other == null) {
        return;
      }
      if (other.searchTerm_ != null) {
        if (searchTerm_ == null) {
          searchTerm_ = new global::TanukiGameRecordServer.SearchTerm();
        }
        SearchTerm.MergeFrom(other.SearchTerm);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (searchTerm_ == null) {
              searchTerm_ = new global::TanukiGameRecordServer.SearchTerm();
            }
            input.ReadMessage(searchTerm_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SearchTerm : pb::IMessage<SearchTerm> {
    private static readonly pb::MessageParser<SearchTerm> _parser = new pb::MessageParser<SearchTerm>(() => new SearchTerm());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchTerm> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TanukiGameRecordServer.TanukiGameRecordServerReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchTerm() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchTerm(SearchTerm other) : this() {
      type_ = other.type_;
      stringValue_ = other.stringValue_;
      int32Value_ = other.int32Value_;
      int64Value_ = other.int64Value_;
      negate_ = other.negate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchTerm Clone() {
      return new SearchTerm(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::TanukiGameRecordServer.SearchTerm.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TanukiGameRecordServer.SearchTerm.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "string_value" field.</summary>
    public const int StringValueFieldNumber = 2;
    private string stringValue_ = "";
    /// <summary>
    ///  stringの値
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringValue {
      get { return stringValue_; }
      set {
        stringValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "int32_value" field.</summary>
    public const int Int32ValueFieldNumber = 3;
    private int int32Value_;
    /// <summary>
    ///  int32の値
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Int32Value {
      get { return int32Value_; }
      set {
        int32Value_ = value;
      }
    }

    /// <summary>Field number for the "int64_value" field.</summary>
    public const int Int64ValueFieldNumber = 4;
    private long int64Value_;
    /// <summary>
    ///  int64の値
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Int64Value {
      get { return int64Value_; }
      set {
        int64Value_ = value;
      }
    }

    /// <summary>Field number for the "negate" field.</summary>
    public const int NegateFieldNumber = 5;
    private bool negate_;
    /// <summary>
    ///  否定する場合はtrue
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Negate {
      get { return negate_; }
      set {
        negate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchTerm);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchTerm other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (StringValue != other.StringValue) return false;
      if (Int32Value != other.Int32Value) return false;
      if (Int64Value != other.Int64Value) return false;
      if (Negate != other.Negate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (StringValue.Length != 0) hash ^= StringValue.GetHashCode();
      if (Int32Value != 0) hash ^= Int32Value.GetHashCode();
      if (Int64Value != 0L) hash ^= Int64Value.GetHashCode();
      if (Negate != false) hash ^= Negate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (StringValue.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StringValue);
      }
      if (Int32Value != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Int32Value);
      }
      if (Int64Value != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Int64Value);
      }
      if (Negate != false) {
        output.WriteRawTag(40);
        output.WriteBool(Negate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (StringValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringValue);
      }
      if (Int32Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Int32Value);
      }
      if (Int64Value != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Int64Value);
      }
      if (Negate != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchTerm other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.StringValue.Length != 0) {
        StringValue = other.StringValue;
      }
      if (other.Int32Value != 0) {
        Int32Value = other.Int32Value;
      }
      if (other.Int64Value != 0L) {
        Int64Value = other.Int64Value;
      }
      if (other.Negate != false) {
        Negate = other.Negate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::TanukiGameRecordServer.SearchTerm.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            StringValue = input.ReadString();
            break;
          }
          case 24: {
            Int32Value = input.ReadInt32();
            break;
          }
          case 32: {
            Int64Value = input.ReadInt64();
            break;
          }
          case 40: {
            Negate = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SearchTerm message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("UnknownSearchTermType")] UnknownSearchTermType = 0,
        /// <summary>
        ///  先手、下手の対局者名 (完全一致)
        ///
        ///  string_valueを使用する
        /// </summary>
        [pbr::OriginalName("BlackPerfectMatching")] BlackPerfectMatching = 1,
        /// <summary>
        ///  先手、下手の対局者名 (前方一致)
        ///
        ///  string_valueを使用する
        /// </summary>
        [pbr::OriginalName("BlackForwardMatching")] BlackForwardMatching = 2,
        /// <summary>
        ///  先手、下手の対局者名 (指定した文字列を含む)
        ///
        ///  string_valueを使用する
        /// </summary>
        [pbr::OriginalName("BlackIncluding")] BlackIncluding = 3,
        /// <summary>
        ///  先手、下手の対局者名 (後方一致)
        ///
        ///  string_valueを使用する
        /// </summary>
        [pbr::OriginalName("BlackBackwardMatching")] BlackBackwardMatching = 4,
        /// <summary>
        ///  後手、上手の対局者名 (完全一致)
        ///
        ///  string_valueを使用する
        /// </summary>
        [pbr::OriginalName("WhitePerfectMatching")] WhitePerfectMatching = 5,
        /// <summary>
        ///  後手、上手の対局者名 (前方一致)
        ///
        ///  string_valueを使用する
        /// </summary>
        [pbr::OriginalName("WhiteForwardMatching")] WhiteForwardMatching = 6,
        /// <summary>
        ///  後手、上手の対局者名 (指定した文字列を含む)
        ///
        ///  string_valueを使用する
        /// </summary>
        [pbr::OriginalName("WhiteIncluding")] WhiteIncluding = 7,
        /// <summary>
        ///  後手、上手の対局者名 (後方一致)
        ///
        ///  string_valueを使用する
        /// </summary>
        [pbr::OriginalName("WhiteBackwardMatching")] WhiteBackwardMatching = 8,
        /// <summary>
        ///  棋戦名 (完全一致)
        ///
        ///  string_valueを使用する
        /// </summary>
        [pbr::OriginalName("EventPerfectMatching")] EventPerfectMatching = 9,
        /// <summary>
        ///  棋戦名 (前方一致)
        ///
        ///  string_valueを使用する
        /// </summary>
        [pbr::OriginalName("EventForwardMatching")] EventForwardMatching = 10,
        /// <summary>
        ///  棋戦名 (指定した文字列を含む)
        ///
        ///  string_valueを使用する
        /// </summary>
        [pbr::OriginalName("EventIncluding")] EventIncluding = 11,
        /// <summary>
        ///  棋戦名 (後方一致)
        ///
        ///  string_valueを使用する
        /// </summary>
        [pbr::OriginalName("EventBackwardMatching")] EventBackwardMatching = 12,
        /// <summary>
        ///  対局場所 (完全一致)
        ///
        ///  string_valueを使用する
        /// </summary>
        [pbr::OriginalName("SitePerfectMatching")] SitePerfectMatching = 13,
        /// <summary>
        ///  対局場所 (前方一致)
        ///
        ///  string_valueを使用する
        /// </summary>
        [pbr::OriginalName("SiteForwardMatching")] SiteForwardMatching = 14,
        /// <summary>
        ///  対局場所 (指定した文字列を含む)
        ///
        ///  string_valueを使用する
        /// </summary>
        [pbr::OriginalName("SiteIncluding")] SiteIncluding = 15,
        /// <summary>
        ///  対局場所 (後方一致)
        ///
        ///  string_valueを使用する
        /// </summary>
        [pbr::OriginalName("SiteBackwardMatching")] SiteBackwardMatching = 16,
        /// <summary>
        ///  対局開始日時の下限 (この値を含む)
        ///
        ///  int64_valueを使用する
        /// </summary>
        [pbr::OriginalName("StartTime100NanoFrom")] StartTime100NanoFrom = 17,
        /// <summary>
        ///  対局開始日時の上限 (この値を含まない)
        ///
        ///  int64_valueを使用する
        /// </summary>
        [pbr::OriginalName("StartTime100NanoTo")] StartTime100NanoTo = 18,
        /// <summary>
        ///  対局終了日時の下限 (この値を含む)
        ///
        ///  int64_valueを使用する
        /// </summary>
        [pbr::OriginalName("EndTime100NanoFrom")] EndTime100NanoFrom = 19,
        /// <summary>
        ///  対局終了日時の上限 (この値を含まない)
        ///
        ///  int64_valueを使用する
        /// </summary>
        [pbr::OriginalName("EndTime100NanoTo")] EndTime100NanoTo = 20,
        /// <summary>
        ///  持ち時間の下限 (この値を含む)
        ///
        ///  int32_valueを使用する
        /// </summary>
        [pbr::OriginalName("TimeLimitMinFrom")] TimeLimitMinFrom = 21,
        /// <summary>
        ///  持ち時間の上限 (この値を含まない)
        ///
        ///  int32_valueを使用する
        /// </summary>
        [pbr::OriginalName("TimeLimitMinTo")] TimeLimitMinTo = 22,
        /// <summary>
        ///  秒読みの下限 (この値を含む)
        ///
        ///  int32_valueを使用する
        /// </summary>
        [pbr::OriginalName("TimeLimitByoyomiSecFrom")] TimeLimitByoyomiSecFrom = 23,
        /// <summary>
        ///  秒読みの上限 (この値を含まない)
        ///
        ///  int32_valueを使用する
        /// </summary>
        [pbr::OriginalName("TimeLimitByoyomiSecTo")] TimeLimitByoyomiSecTo = 24,
        /// <summary>
        ///  フィッシャールールにおける追加秒数の下限 (この値を含む)
        ///
        ///  int32_valueを使用する
        /// </summary>
        [pbr::OriginalName("TimeLimitIncrementalSecFrom")] TimeLimitIncrementalSecFrom = 25,
        /// <summary>
        ///  フィッシャールールにおける追加秒数の上限 (この値を含まない)
        ///
        ///  int32_valueを使用する
        /// </summary>
        [pbr::OriginalName("TimeLimitIncrementalSecTo")] TimeLimitIncrementalSecTo = 26,
        /// <summary>
        ///  戦型 (完全一致)
        ///
        ///  string_valueを使用する
        /// </summary>
        [pbr::OriginalName("OpeningPerfectMatching")] OpeningPerfectMatching = 27,
        /// <summary>
        ///  戦型 (前方一致)
        ///
        ///  string_valueを使用する
        /// </summary>
        [pbr::OriginalName("OpeningForwardMatching")] OpeningForwardMatching = 28,
        /// <summary>
        ///  戦型 (指定した文字列を含む)
        ///
        ///  string_valueを使用する
        /// </summary>
        [pbr::OriginalName("OpeningIncluding")] OpeningIncluding = 29,
        /// <summary>
        ///  戦型 (後方一致)
        ///
        ///  string_valueを使用する
        /// </summary>
        [pbr::OriginalName("OpeningBackwardMatching")] OpeningBackwardMatching = 30,
      }

    }
    #endregion

  }

  /// <summary>
  ///  棋譜ID
  /// </summary>
  public sealed partial class GameRecordId : pb::IMessage<GameRecordId> {
    private static readonly pb::MessageParser<GameRecordId> _parser = new pb::MessageParser<GameRecordId>(() => new GameRecordId());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameRecordId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TanukiGameRecordServer.TanukiGameRecordServerReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameRecordId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameRecordId(GameRecordId other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameRecordId Clone() {
      return new GameRecordId(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    /// <summary>
    ///  [必須] 棋譜ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameRecordId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameRecordId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameRecordId other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameRecord : pb::IMessage<GameRecord> {
    private static readonly pb::MessageParser<GameRecord> _parser = new pb::MessageParser<GameRecord>(() => new GameRecord());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TanukiGameRecordServer.TanukiGameRecordServerReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameRecord(GameRecord other) : this() {
      Id = other.id_ != null ? other.Id.Clone() : null;
      black_ = other.black_;
      white_ = other.white_;
      event_ = other.event_;
      site_ = other.site_;
      startTime100Nano_ = other.startTime100Nano_;
      endTime100Nano_ = other.endTime100Nano_;
      timeLimitMin_ = other.timeLimitMin_;
      timeLimitByoyomiSec_ = other.timeLimitByoyomiSec_;
      timeLimitIncrementalSec_ = other.timeLimitIncrementalSec_;
      opening_ = other.opening_;
      initialBoard_ = other.initialBoard_.Clone();
      move_ = other.move_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameRecord Clone() {
      return new GameRecord(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::TanukiGameRecordServer.GameRecordId id_;
    /// <summary>
    ///  棋譜ID (サーバーから返る場合は必須)
    ///
    ///  tanuki-game-record-server内での棋譜のID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TanukiGameRecordServer.GameRecordId Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "black" field.</summary>
    public const int BlackFieldNumber = 2;
    private string black_ = "";
    /// <summary>
    ///  先手、下手の対局者名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Black {
      get { return black_; }
      set {
        black_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "white" field.</summary>
    public const int WhiteFieldNumber = 3;
    private string white_ = "";
    /// <summary>
    ///  後手、上手の対局者名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string White {
      get { return white_; }
      set {
        white_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 4;
    private string event_ = "";
    /// <summary>
    ///  棋戦名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Event {
      get { return event_; }
      set {
        event_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "site" field.</summary>
    public const int SiteFieldNumber = 5;
    private string site_ = "";
    /// <summary>
    ///  対局場所
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Site {
      get { return site_; }
      set {
        site_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start_time_100nano" field.</summary>
    public const int StartTime100NanoFieldNumber = 6;
    private long startTime100Nano_;
    /// <summary>
    ///  対局開始日時
    ///
    ///  0001年1月1日の午前12時00分00秒からの経過時間を100ナノ秒間隔の数で表す
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime100Nano {
      get { return startTime100Nano_; }
      set {
        startTime100Nano_ = value;
      }
    }

    /// <summary>Field number for the "end_time_100nano" field.</summary>
    public const int EndTime100NanoFieldNumber = 7;
    private long endTime100Nano_;
    /// <summary>
    ///  対局終了日時
    ///
    ///  0001年1月1日の午前12時00分00秒からの経過時間を100ナノ秒間隔の数で表す
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndTime100Nano {
      get { return endTime100Nano_; }
      set {
        endTime100Nano_ = value;
      }
    }

    /// <summary>Field number for the "time_limit_min" field.</summary>
    public const int TimeLimitMinFieldNumber = 8;
    private int timeLimitMin_;
    /// <summary>
    ///  持ち時間
    ///
    ///  分で表す
    ///  秒読み分やフィッシャールールにおける追加秒数分は含まない 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimeLimitMin {
      get { return timeLimitMin_; }
      set {
        timeLimitMin_ = value;
      }
    }

    /// <summary>Field number for the "time_limit_byoyomi_sec" field.</summary>
    public const int TimeLimitByoyomiSecFieldNumber = 9;
    private int timeLimitByoyomiSec_;
    /// <summary>
    ///  秒読み
    ///
    ///  秒で表す
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimeLimitByoyomiSec {
      get { return timeLimitByoyomiSec_; }
      set {
        timeLimitByoyomiSec_ = value;
      }
    }

    /// <summary>Field number for the "time_limit_incremental_sec" field.</summary>
    public const int TimeLimitIncrementalSecFieldNumber = 10;
    private int timeLimitIncrementalSec_;
    /// <summary>
    ///  フィッシャールールにおける追加秒数
    ///
    ///  秒で表す
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimeLimitIncrementalSec {
      get { return timeLimitIncrementalSec_; }
      set {
        timeLimitIncrementalSec_ = value;
      }
    }

    /// <summary>Field number for the "opening" field.</summary>
    public const int OpeningFieldNumber = 11;
    private string opening_ = "";
    /// <summary>
    ///  戦型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Opening {
      get { return opening_; }
      set {
        opening_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "initial_board" field.</summary>
    public const int InitialBoardFieldNumber = 12;
    private static readonly pb::FieldCodec<global::TanukiGameRecordServer.Piece> _repeated_initialBoard_codec
        = pb::FieldCodec.ForMessage(98, global::TanukiGameRecordServer.Piece.Parser);
    private readonly pbc::RepeatedField<global::TanukiGameRecordServer.Piece> initialBoard_ = new pbc::RepeatedField<global::TanukiGameRecordServer.Piece>();
    /// <summary>
    ///  初期局面
    ///
    ///  空の場合は平手の局面を表す
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TanukiGameRecordServer.Piece> InitialBoard {
      get { return initialBoard_; }
    }

    /// <summary>Field number for the "move" field.</summary>
    public const int MoveFieldNumber = 13;
    private static readonly pb::FieldCodec<global::TanukiGameRecordServer.Move> _repeated_move_codec
        = pb::FieldCodec.ForMessage(106, global::TanukiGameRecordServer.Move.Parser);
    private readonly pbc::RepeatedField<global::TanukiGameRecordServer.Move> move_ = new pbc::RepeatedField<global::TanukiGameRecordServer.Move>();
    /// <summary>
    ///  初期局面からの指し手
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TanukiGameRecordServer.Move> Move {
      get { return move_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (Black != other.Black) return false;
      if (White != other.White) return false;
      if (Event != other.Event) return false;
      if (Site != other.Site) return false;
      if (StartTime100Nano != other.StartTime100Nano) return false;
      if (EndTime100Nano != other.EndTime100Nano) return false;
      if (TimeLimitMin != other.TimeLimitMin) return false;
      if (TimeLimitByoyomiSec != other.TimeLimitByoyomiSec) return false;
      if (TimeLimitIncrementalSec != other.TimeLimitIncrementalSec) return false;
      if (Opening != other.Opening) return false;
      if(!initialBoard_.Equals(other.initialBoard_)) return false;
      if(!move_.Equals(other.move_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (Black.Length != 0) hash ^= Black.GetHashCode();
      if (White.Length != 0) hash ^= White.GetHashCode();
      if (Event.Length != 0) hash ^= Event.GetHashCode();
      if (Site.Length != 0) hash ^= Site.GetHashCode();
      if (StartTime100Nano != 0L) hash ^= StartTime100Nano.GetHashCode();
      if (EndTime100Nano != 0L) hash ^= EndTime100Nano.GetHashCode();
      if (TimeLimitMin != 0) hash ^= TimeLimitMin.GetHashCode();
      if (TimeLimitByoyomiSec != 0) hash ^= TimeLimitByoyomiSec.GetHashCode();
      if (TimeLimitIncrementalSec != 0) hash ^= TimeLimitIncrementalSec.GetHashCode();
      if (Opening.Length != 0) hash ^= Opening.GetHashCode();
      hash ^= initialBoard_.GetHashCode();
      hash ^= move_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (Black.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Black);
      }
      if (White.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(White);
      }
      if (Event.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Event);
      }
      if (Site.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Site);
      }
      if (StartTime100Nano != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(StartTime100Nano);
      }
      if (EndTime100Nano != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(EndTime100Nano);
      }
      if (TimeLimitMin != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(TimeLimitMin);
      }
      if (TimeLimitByoyomiSec != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(TimeLimitByoyomiSec);
      }
      if (TimeLimitIncrementalSec != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(TimeLimitIncrementalSec);
      }
      if (Opening.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Opening);
      }
      initialBoard_.WriteTo(output, _repeated_initialBoard_codec);
      move_.WriteTo(output, _repeated_move_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (Black.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Black);
      }
      if (White.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(White);
      }
      if (Event.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Event);
      }
      if (Site.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Site);
      }
      if (StartTime100Nano != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime100Nano);
      }
      if (EndTime100Nano != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime100Nano);
      }
      if (TimeLimitMin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeLimitMin);
      }
      if (TimeLimitByoyomiSec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeLimitByoyomiSec);
      }
      if (TimeLimitIncrementalSec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeLimitIncrementalSec);
      }
      if (Opening.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Opening);
      }
      size += initialBoard_.CalculateSize(_repeated_initialBoard_codec);
      size += move_.CalculateSize(_repeated_move_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameRecord other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          id_ = new global::TanukiGameRecordServer.GameRecordId();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.Black.Length != 0) {
        Black = other.Black;
      }
      if (other.White.Length != 0) {
        White = other.White;
      }
      if (other.Event.Length != 0) {
        Event = other.Event;
      }
      if (other.Site.Length != 0) {
        Site = other.Site;
      }
      if (other.StartTime100Nano != 0L) {
        StartTime100Nano = other.StartTime100Nano;
      }
      if (other.EndTime100Nano != 0L) {
        EndTime100Nano = other.EndTime100Nano;
      }
      if (other.TimeLimitMin != 0) {
        TimeLimitMin = other.TimeLimitMin;
      }
      if (other.TimeLimitByoyomiSec != 0) {
        TimeLimitByoyomiSec = other.TimeLimitByoyomiSec;
      }
      if (other.TimeLimitIncrementalSec != 0) {
        TimeLimitIncrementalSec = other.TimeLimitIncrementalSec;
      }
      if (other.Opening.Length != 0) {
        Opening = other.Opening;
      }
      initialBoard_.Add(other.initialBoard_);
      move_.Add(other.move_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (id_ == null) {
              id_ = new global::TanukiGameRecordServer.GameRecordId();
            }
            input.ReadMessage(id_);
            break;
          }
          case 18: {
            Black = input.ReadString();
            break;
          }
          case 26: {
            White = input.ReadString();
            break;
          }
          case 34: {
            Event = input.ReadString();
            break;
          }
          case 42: {
            Site = input.ReadString();
            break;
          }
          case 48: {
            StartTime100Nano = input.ReadInt64();
            break;
          }
          case 56: {
            EndTime100Nano = input.ReadInt64();
            break;
          }
          case 64: {
            TimeLimitMin = input.ReadInt32();
            break;
          }
          case 72: {
            TimeLimitByoyomiSec = input.ReadInt32();
            break;
          }
          case 80: {
            TimeLimitIncrementalSec = input.ReadInt32();
            break;
          }
          case 90: {
            Opening = input.ReadString();
            break;
          }
          case 98: {
            initialBoard_.AddEntriesFrom(input, _repeated_initialBoard_codec);
            break;
          }
          case 106: {
            move_.AddEntriesFrom(input, _repeated_move_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  指し手
  /// </summary>
  public sealed partial class Move : pb::IMessage<Move> {
    private static readonly pb::MessageParser<Move> _parser = new pb::MessageParser<Move>(() => new Move());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Move> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TanukiGameRecordServer.TanukiGameRecordServerReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Move() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Move(Move other) : this() {
      From = other.from_ != null ? other.From.Clone() : null;
      To = other.to_ != null ? other.To.Clone() : null;
      pieceType_ = other.pieceType_;
      color_ = other.color_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Move Clone() {
      return new Move(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private global::TanukiGameRecordServer.Square from_;
    /// <summary>
    ///  [必須] 移動元の升または駒台
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TanukiGameRecordServer.Square From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private global::TanukiGameRecordServer.Square to_;
    /// <summary>
    ///  [必須] 移動先の升または駒台
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TanukiGameRecordServer.Square To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "piece_type" field.</summary>
    public const int PieceTypeFieldNumber = 3;
    private global::TanukiGameRecordServer.PieceType pieceType_ = 0;
    /// <summary>
    ///  [必須] 駒の種類
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TanukiGameRecordServer.PieceType PieceType {
      get { return pieceType_; }
      set {
        pieceType_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 4;
    private global::TanukiGameRecordServer.Color color_ = 0;
    /// <summary>
    ///  [必須] どちらの対局者の指し手か？
    ///
    ///  一方の対局者が連続で2手指す非合法手を表現するために使う
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TanukiGameRecordServer.Color Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Move);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Move other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(From, other.From)) return false;
      if (!object.Equals(To, other.To)) return false;
      if (PieceType != other.PieceType) return false;
      if (Color != other.Color) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (from_ != null) hash ^= From.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (PieceType != 0) hash ^= PieceType.GetHashCode();
      if (Color != 0) hash ^= Color.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (from_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(To);
      }
      if (PieceType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) PieceType);
      }
      if (Color != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Color);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (PieceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PieceType);
      }
      if (Color != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Color);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Move other) {
      if (other == null) {
        return;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          from_ = new global::TanukiGameRecordServer.Square();
        }
        From.MergeFrom(other.From);
      }
      if (other.to_ != null) {
        if (to_ == null) {
          to_ = new global::TanukiGameRecordServer.Square();
        }
        To.MergeFrom(other.To);
      }
      if (other.PieceType != 0) {
        PieceType = other.PieceType;
      }
      if (other.Color != 0) {
        Color = other.Color;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (from_ == null) {
              from_ = new global::TanukiGameRecordServer.Square();
            }
            input.ReadMessage(from_);
            break;
          }
          case 18: {
            if (to_ == null) {
              to_ = new global::TanukiGameRecordServer.Square();
            }
            input.ReadMessage(to_);
            break;
          }
          case 24: {
            pieceType_ = (global::TanukiGameRecordServer.PieceType) input.ReadEnum();
            break;
          }
          case 32: {
            color_ = (global::TanukiGameRecordServer.Color) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  升または駒台
  /// </summary>
  public sealed partial class Square : pb::IMessage<Square> {
    private static readonly pb::MessageParser<Square> _parser = new pb::MessageParser<Square>(() => new Square());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Square> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TanukiGameRecordServer.TanukiGameRecordServerReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Square() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Square(Square other) : this() {
      type_ = other.type_;
      file_ = other.file_;
      rank_ = other.rank_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Square Clone() {
      return new Square(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::TanukiGameRecordServer.Square.Types.Type type_ = 0;
    /// <summary>
    ///  [必須] 升または駒台
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TanukiGameRecordServer.Square.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "file" field.</summary>
    public const int FileFieldNumber = 2;
    private int file_;
    /// <summary>
    ///  筋 (typeがOnBoardの場合は必須)
    ///
    ///  一番右の1筋を1とする
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int File {
      get { return file_; }
      set {
        file_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 3;
    private int rank_;
    /// <summary>
    ///  段 (typeがOnBoardの場合は必須)
    ///
    ///  一番上の一段を1とする
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Square);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Square other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (File != other.File) return false;
      if (Rank != other.Rank) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (File != 0) hash ^= File.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (File != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(File);
      }
      if (Rank != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Rank);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (File != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(File);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Square other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.File != 0) {
        File = other.File;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::TanukiGameRecordServer.Square.Types.Type) input.ReadEnum();
            break;
          }
          case 16: {
            File = input.ReadInt32();
            break;
          }
          case 24: {
            Rank = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Square message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("UnknownSquareType")] UnknownSquareType = 0,
        [pbr::OriginalName("OnBoard")] OnBoard = 1,
        [pbr::OriginalName("PieceStand")] PieceStand = 2,
      }

    }
    #endregion

  }

  /// <summary>
  ///  初期盤面における駒を表す
  /// </summary>
  public sealed partial class Piece : pb::IMessage<Piece> {
    private static readonly pb::MessageParser<Piece> _parser = new pb::MessageParser<Piece>(() => new Piece());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Piece> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TanukiGameRecordServer.TanukiGameRecordServerReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Piece() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Piece(Piece other) : this() {
      Square = other.square_ != null ? other.Square.Clone() : null;
      pieceType_ = other.pieceType_;
      color_ = other.color_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Piece Clone() {
      return new Piece(this);
    }

    /// <summary>Field number for the "square" field.</summary>
    public const int SquareFieldNumber = 1;
    private global::TanukiGameRecordServer.Square square_;
    /// <summary>
    ///  [必須] 升または駒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TanukiGameRecordServer.Square Square {
      get { return square_; }
      set {
        square_ = value;
      }
    }

    /// <summary>Field number for the "piece_type" field.</summary>
    public const int PieceTypeFieldNumber = 2;
    private global::TanukiGameRecordServer.PieceType pieceType_ = 0;
    /// <summary>
    ///  [必須] 駒の種類
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TanukiGameRecordServer.PieceType PieceType {
      get { return pieceType_; }
      set {
        pieceType_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 3;
    private global::TanukiGameRecordServer.Color color_ = 0;
    /// <summary>
    ///  [必須] 先手・後手どちらの駒か？
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TanukiGameRecordServer.Color Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Piece);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Piece other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Square, other.Square)) return false;
      if (PieceType != other.PieceType) return false;
      if (Color != other.Color) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (square_ != null) hash ^= Square.GetHashCode();
      if (PieceType != 0) hash ^= PieceType.GetHashCode();
      if (Color != 0) hash ^= Color.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (square_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Square);
      }
      if (PieceType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) PieceType);
      }
      if (Color != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Color);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (square_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Square);
      }
      if (PieceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PieceType);
      }
      if (Color != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Color);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Piece other) {
      if (other == null) {
        return;
      }
      if (other.square_ != null) {
        if (square_ == null) {
          square_ = new global::TanukiGameRecordServer.Square();
        }
        Square.MergeFrom(other.Square);
      }
      if (other.PieceType != 0) {
        PieceType = other.PieceType;
      }
      if (other.Color != 0) {
        Color = other.Color;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (square_ == null) {
              square_ = new global::TanukiGameRecordServer.Square();
            }
            input.ReadMessage(square_);
            break;
          }
          case 16: {
            pieceType_ = (global::TanukiGameRecordServer.PieceType) input.ReadEnum();
            break;
          }
          case 24: {
            color_ = (global::TanukiGameRecordServer.Color) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
